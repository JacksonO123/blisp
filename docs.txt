print:
- any # of params
- params of any type

+:
- more than 0 params
- params must be float or int type

-:
- more than 0 params
- params must be float or int type

*:
- more than 0 params
- params must be float or int type

/:
- more than 0 params
- params must be float or int type

^:
- 2 params
- params must be int of float type
- first param is base, second is exponent

%:
- 2 params
- params must be int type

eval:
- more than 0 params
- if it only has 1 param, it returns the return value of its evaluation
- params must be of type string ... good luck

var:
- 2 params
- first param is variable name, second is the value

set:
- 2 or 3 params
	| 2 params:
		case: first param is variable name, second is the value
	| 3 params:
		case: first param is list, second is index, third is value

free:
- 1 param
- param is the variable to remove from memory

type:
- 1 param
- param can be any value

get:
- 2 params
- first param is the list, second is the index

loop:
- 3 or 4 params
	| 3 params:
		case: first param is list, second is iterator, third is loop body
		case: first is number end number, second is index iterator, third is loop body
	| 4 params:
		case: first param is the list, second is index iterator, third is value iterator, fourth is loop body
		case: first param is start number, second is end number, third is index iterator, fourth is loop body

scan-line:
- 0 or 1 params
	| 0 params:
		- returns the line input
	| 1 param:
		- param is a variable
		- assigns the line input to the variable

if:
- 2 or 3 params
- first param is code to eval to boolean,
	second is the code to eval if condition is true,
	third is optional if the condition is false

eq:
- more than 0 params
- returns true if all params are equal, false if not

body:
- not a function
- equivalent of "{ ... }" in other languages

append, prepend:
- 2 or more params
- first param must be a list
- other params can be any type

exit:
- 0 or 1 params
- param is exit code, must be int

break:
- breaks from list

pop:
- 1 param
- param must be a list

remove:
- 2 params
- first param is list, second is the index to remove

return:
- any # of params
- returns from function
